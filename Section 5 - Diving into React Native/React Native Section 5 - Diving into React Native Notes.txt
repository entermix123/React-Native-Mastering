Section 5: Diving into React Native

Content

22. JSX
23. Events
24. Hooks
25. Props




22. JSX
=======
JSX is combination between HTML (xml) and React syntax

Open the demoapp2 and rename App.js to App.jsx (JSX - JavaScript XML)


App.jsx
--------------------------------------------------------------
// import Libraries
import React from "react";
import { Text, StyleSheet, View } from "react-native";
import Login from "./screen/Login.js";
import Signup from "./screen/Signup.js";

// components
const App = () => {
  return (
    <>
        <View style={styles.text}>
          <Text style={styles.container}> Meta Brains </Text>
          <Login />
          <Signup />   
        </View>
    </>
  );
};

//styling
const styles = StyleSheet.create({
  text: {
    felx: 1,
    color: "red",
    backgroundColor: "pink",
    height: 900,
    justifyContent: "center",
    alignItems: "center",
  },
  container: {
    felx: 1,
    fontWeight: "bold",
    color: "red",
  },
});

export default App;
--------------------------------------------------------------
Start the app
	terminal --> npx expo start


Go to babel - https://babeljs.io/ Try it
	- We can translate js and HTML (xml) components to jsx syntax (JSX - JavaScript XML)




23. Events
==========

Every mobile app depends on View, Text and button elements.



Here is the App.jsx with imported button and event handler

App.jsx
--------------------------------------------------------------
// import Libraries
import React from "react";
import { Text, StyleSheet, View, Button, Alert } from "react-native";
// import Login from "./screen/Login.js";
// import Signup from "./screen/Signup.js";

// components
const App = () => {

  const a = (value) => {
    console.warn(value);                          /* This shows warning on the console only */
    Alert.alert("Warning", `Value: ${value}`);    /* This shows warning on the mobile */
  };

  return (
    <>
        <View style={styles.container}>
          <Text style={styles.text}> Meta Brains </Text>
          {/* <Login />
          <Signup />    */}
          <Button title="Press Here" color={"red"} onPress={() => a(450)} />     /* mandatory prop is "title="title text" onPress is event handler */
        </View>
    </>
  );
};

//styling
const styles = StyleSheet.create({
  container: {
    flex: 1,
    color: "red",
    backgroundColor: "pink",
    height: 900,
    justifyContent: "center",
    alignItems: "center",
  },
  text: {
    felx: 1,
    fontWeight: "bold",
    color: "red",
  },
});

export default App;
--------------------------------------------------------------





24. Hooks
=========

Hook are used to produce data dynamically true events. Most used hooks are 'useState' and 'props'

state hook
-----------

State hook will not work in other component.

App.jsx
--------------------------------------------------------------
// import Libraries
import React, { useState } from "react";
import { Text, StyleSheet, View, Button, Alert } from "react-native";
// import Login from "./screen/Login.js";
// import Signup from "./screen/Signup.js";

// components
const App = () => {

  // const a = (value) => {
  //   console.warn(value);                          /* This shows warning on the console only */
  //   Alert.alert("Warning", `Value: ${value}`);    /* This shows warning on the mobile */
  // };

  const [ user, setUser ] = useState("Joe");
  const [ data, setData ] = useState("Sam");

  function updateName() {  
    setUser("Carlos");  
    setData("Peter");
  };

  return (
    <View style={styles.container}>
      <Text style={styles.text}>{user}</Text>
      <Text style={styles.text}>{data}</Text>
      <Button 
        title="Press Here" 
        color="red" 
        onPress={updateName}        /* mandatory prop is "title="title text" onPress is event handler */
      />
    </View>
  );
};

//styling
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "pink",
    justifyContent: "center",
    alignItems: "center",
  },
  text: {
    fontWeight: "bold",
    color: "red",
  },
});

export default App;
--------------------------------------------------------------




25. Props
=========

We use static variable or dynamic values with useState hook


App.jsx
--------------------------------------------------------------
// import Libraries
import React, { useState } from "react";
import { Text, StyleSheet, View, Button, Alert } from "react-native";
// import Login from "./screen/Login.js";
// import Signup from "./screen/Signup.js";

// components
const App = () => {

  // let newData = "Josh";                         /* Set props in the main element */  
  const [ user, setUser ] = useState("Joe");
  const [ data, setData ] = useState("Sam");
  const [ newData, SetnewData ] = useState("Divak")

  function updateName() {  
    setUser("Carlos");  
    setData("Peter");
  };

  return (
    <View style={styles.container}>
      <Text style={styles.text}>{user}</Text>
      <Text style={styles.text}>{data}</Text>
      <Button title="Press Here" color="red" onPress={updateName}        /* mandatory prop is "title="title text" onPress is event handler */
      />
      <Propscomponent newData={newData} />
      <Button title="Change component data true props" color="gray" onPress={() => SetnewData('Pesho')}        /* mandatory prop is "title="title text" onPress is event handler */
      />
    </View>
  );
};


const Propscomponent = (props) => {
  return (
    <>
      <View style={styles.second}>
        <Text style={styles.text}> Second component </Text>
        <Text style={styles.text}> {props.newData}  </Text>        
      </View>
    </>
  );
};

//styling
const styles = StyleSheet.create({
  container: {
    color: "red",
    backgroundColor: "pink",
  },
  second: {
    color: "red",
    backgroundColor: "green",
    height: 100,
  },
  text: {
    fontWeight: "bold",
    color: "red",
  },
});

export default App;
--------------------------------------------------------------











